<?xml version="1.0" encoding="utf-8" ?>
<chapter name="Functions" order="150" xml:space="preserve">
  <topic name="hue">
    <description>
      Returns or modifies the hue of a color
    </description>
    <further>
#### Parameters

 * `color`
 * `amount` - **(optional)** Should be between -360 and 360 inclusive. 

When `amount` is specified, returns a new color with the hue component modified by that amount. Otherwise returns the hue component of the specified color in degrees.
    </further>
    <params>color, [amount]</params>
    <exampleLess>
<![CDATA[
@base_color: #ffcc00;
.example1 { background: @base_color; } 
.example2 { background: hue(@base_color, 30); }
.example3 { background: hue(@base_color, 120); }
.example4 { background: hue(@base_color, 180); }
]]>
    </exampleLess>
    <exampleBody>
<![CDATA[
<div class="example1">Example 1</div>
<div class="example2">Example 2</div>
<div class="example3">Example 3</div>
<div class="example4">Example 4</div>
]]>
    </exampleBody>
  </topic>

  <topic name="saturation">
    <description>
      Returns or modifies the saturation of a color
    </description>
    <further>
#### Parameters

 * `color`
 * `amount` - **(optional)** Should be between -100% and 100% inclusive. 

When `amount` is specified, returns a new color with the saturation component modified by that amount. Otherwise returns the saturation component of the specified color in percent.
    </further>
    <params>color, [amount]</params>
    <exampleLess>
      <![CDATA[
@base_color: #cc8844;
.example {
  background: saturation(@base_color, -20);
  :hover { 
    background: saturation(@base_color, 50);
  }
}
]]>
    </exampleLess>
    <exampleBody>
<![CDATA[
<div class="example">Mouse over me!</div>
]]>
    </exampleBody>
  </topic>

  <topic name="lightness">
    <description>
      Returns or modifies the brightness of a color
    </description>
    <further>
#### Parameters

 * `color`
 * `amount` - **(optional)** Should be between -100% and 100% inclusive. 

When `amount` is specified, returns a new color with the lightness component modified by that amount. Otherwise returns the lightness component of the specified color in percent.
    </further>
    <params>color, [amount]</params>
    <exampleLess>
      <![CDATA[
@base_color: #2255aa;
.example1 { background: @base_color; } 
.example2 { background: lightness(@base_color, -10); }
.example3 { background: lightness(@base_color, 10); }
.example4 { background: lightness(@base_color, 20); }
]]>
    </exampleLess>
    <exampleBody>
<![CDATA[
<div class="example1">Base Color</div>
<div class="example2">Darker</div>
<div class="example3">Lighter</div>
<div class="example4">Even Lighter</div>
]]>
    </exampleBody>
  </topic>

  <topic name="red">
    <description>
      Returns or modifies the red component of a color
    </description>
    <further>
#### Parameters

 * `color`
 * `amount` - **(optional)** Should be between -255 and 255 inclusive, or between -100% and 100% inclusive. 

When `amount` is specified, returns a new color with the red component modified by that amount. Otherwise returns the red component of the specified color.
    </further>
    <params>color, [amount]</params>
    <exampleLess>
<![CDATA[
@base_color: #888888;
.example1 { background: @base_color; }
.example2 { background: red(@base_color, 50%); }
.example3 { background: red(@base_color, -50%); }
]]>
    </exampleLess>
    <exampleBody>
<![CDATA[
<div class="example1">Original</div>
<div class="example2">More Red</div>
<div class="example3">Less Red</div>
]]>
    </exampleBody>
  </topic>

  <topic name="green">
    <description>
      Returns or modifies the green component of a color
    </description>
    <further>
#### Parameters

 * `color`
 * `amount` - **(optional)** Should be between -255 and 255 inclusive, or between -100% and 100% inclusive. 

When `amount` is specified, returns a new color with the green component modified by that amount. Otherwise returns the green component of the specified color.
    </further>
    <params>color, [amount]</params>
    <exampleLess>
<![CDATA[
@base_color: #888888;
.example1 { background: @base_color; }
.example2 { background: green(@base_color, 50%); }
.example3 { background: green(@base_color, -50%); }
]]>
    </exampleLess>
    <exampleBody>
<![CDATA[
<div class="example1">Original</div>
<div class="example2">More Green</div>
<div class="example3">Less Green</div>
]]>
    </exampleBody>

  </topic>

  <topic name="blue">
    <description>
      Returns or modifies the blue component of a color
    </description>
    <further>
#### Parameters

 * `color`
 * `amount` - **(optional)** Should be between -255 and 255 inclusive, or between -100% and 100% inclusive. 

When `amount` is specified, returns a new color with the blue component modified by that amount. Otherwise returns the blue component of the specified color.
    </further>
    <params>color, [amount]</params>
    <exampleLess>
<![CDATA[
@base_color: #888888;
.example1 { background: @base_color; }
.example2 { background: blue(@base_color, 50%); }
.example3 { background: blue(@base_color, -50%); }
]]>
    </exampleLess>
    <exampleBody>
<![CDATA[
<div class="example1">Original</div>
<div class="example2">More Blue</div>
<div class="example3">Less Blue</div>
]]>
    </exampleBody>

  </topic>

  <topic name="rgb">
    <description>
      Returns a color with the specified red, green and blue components
    </description>
    <further>
#### Parameters

 * `red` - can be between 0 and 255 inclusive, or between 0% and 100% inclusive
 * `green` - can be between 0 and 255 inclusive, or between 0% and 100% inclusive
 * `blue` - can be between 0 and 255 inclusive, or between 0% and 100% inclusive
    </further>
    <params>red, green, blue</params>
    <exampleLess>
<![CDATA[
.example1 { background: rgb(100%,  0%,  0%); }
.example2 { background: rgb( 80%, 80%, 80%); }
.example3 { background: rgb( 30%, 80%, 30%); }
.example4 { background: rgb(  10, 172, 223); }
]]>
    </exampleLess>
    <exampleBody>
<![CDATA[
<div class="example1">One</div>
<div class="example2">Two</div>
<div class="example3">Three</div>
<div class="example4">Four</div>
]]>
    </exampleBody>
  </topic>

  <topic name="rgba">
    <description>
      Returns a color with the specified red, green, blue and alpha components
    </description>
    <further>
#### Parameters

 * `red` - can be between 0 and 255 inclusive, or between 0% and 100% inclusive
 * `green` - can be between 0 and 255 inclusive, or between 0% and 100% inclusive
 * `blue` - can be between 0 and 255 inclusive, or between 0% and 100% inclusive
 * `alpha` - can be between 0 and 1 inclusive, or between 0% and 100% inclusive
    </further>
    <params>red, green, blue, alpha</params>
    <exampleLess>
<![CDATA[
.example1 { background: rgba( 30%, 80%, 30%, 50%); }
.example2 { background: rgba( 30%, 80%, 30%, 0.75); }
.example3 { background: rgba( 30%, 80%, 30%, 1); }
.example4 { background: rgba( 30%, 80%, 30%, 0); }
]]>
    </exampleLess>
    <exampleBody>
<![CDATA[
<div class="example1">One</div>
<div class="example2">Two</div>
<div class="example3">Three</div>
<div class="example4">Four</div>
]]>
    </exampleBody>
  </topic>

  <topic name="rgba">
    <description>
      Changes the alpha component of the specified color.
    </description>
    <further>
#### Parameters

 * `color`
 * `alpha` - can be between 0 and 1 inclusive, or between 0% and 100% inclusive

The new color has the same red, green and blue components and the specified color but with the alpha component set to `alpha`.
    </further>
    <params>color, alpha</params>
    <exampleLess>
<![CDATA[
.example1 { background: rgb(red, 0.5); }
.example2 { background: rgb(yellow, 0.75); }
.example3 { background: rgb(#fe9821, 1); }
.example4 { background: rgb(#ffffff, 0); }
]]>
    </exampleLess>
    <exampleBody>
<![CDATA[
<div class="example1">One</div>
<div class="example2">Two</div>
<div class="example3">Three</div>
<div class="example4">Four</div>
]]>
    </exampleBody>
  </topic>


  <topic name="hsl">
    <description>
      Returns a color with the specified hue, saturation and lightness components
    </description>
    <further>
#### Parameters

 * `hue` - should be between 0 and 360 inclusive
 * `saturation` - should be between 0% and 100% inclusive
 * `lightness` - should be between 0% and 100% inclusive
    </further>
    <params>hue, saturation, lightness</params>
    <exampleLess>
<![CDATA[
.example1 { background: hsl( 30, 80%, 70%); }
.example2 { background: hsl(210, 50%, 50%); }
.example3 { background: hsl(170, 80%, 30%); }
.example4 { background: hsl(  0,  0%, 70%); }
]]>
    </exampleLess>
    <exampleBody>
<![CDATA[
<div class="example1">One</div>
<div class="example2">Two</div>
<div class="example3">Three</div>
<div class="example4">Four</div>
]]>
    </exampleBody>
  </topic>


  <topic name="hsla">
    <description>
      Returns a color with the specified hue, saturation, lightness and alpha components
    </description>
    <further>
#### Parameters

 * `hue` - should be between 0 and 360 inclusive
 * `saturation` - should be between 0% and 100% inclusive
 * `lightness` - should be between 0% and 100% inclusive
 * `alpha` - can be between 0 and 1 inclusive, or between 0% and 100% inclusive
    </further>
    <params>hue, saturation, lightness, alpha</params>
    <exampleLess>
<![CDATA[
.example1 { background: hsla(210, 100%, 50%, 0.5); }
.example2 { background: hsla(210, 100%, 50%, 75%); }
.example3 { background: hsla(210, 100%, 50%, 1); }
.example4 { background: hsla(210, 100%, 50%, 0); }
]]>
    </exampleLess>
    <exampleBody>
<![CDATA[
<div class="example1">One</div>
<div class="example2">Two</div>
<div class="example3">Three</div>
<div class="example4">Four</div>
]]>
    </exampleBody>
  </topic>

  <topic name="complement">
    <description>
      Returns the complement of a color
    </description>
    <further>
#### Parameters

 * `color`

This is equivalent to `hue(@color, 180)`.
    </further>
    <params>color</params>
    <exampleLess>
<![CDATA[
@base_color: #44aaff;
.example1 { background: @base_color; }
.example2 { background: complement(@base_color); }
.example3 { background: hue(@base_color, 180); }
]]>
    </exampleLess>
    <exampleBody>
<![CDATA[
<div class="example1">Original</div>
<div class="example2">Complement</div>
<div class="example3">Hue 180</div>
]]>
    </exampleBody>
  </topic>

  <topic name="grayscale">
    <description>
      Converts a color to grayscale
    </description>
    <further>
#### Parameters

 * `color`

This is equivalent to `saturation(@color, -100%)`.
    </further>
    <params>color</params>
    <exampleLess>
<![CDATA[
@base_color: #ffaa44;
.example1 { background: @base_color; }
.example2 { background: grayscale(@base_color); }
.example3 { background: saturation(@base_color, -100%); }
]]>
    </exampleLess>
    <exampleBody>
<![CDATA[
<div class="example1">Original</div>
<div class="example2">Grayscale</div>
<div class="example3">Desaturated</div>
]]>
    </exampleBody>
  </topic>

  <topic name="mix">
    <description>
      Mix two colors together
    </description>
    <further>
Mixes together two colors. Specifically, takes the average of each of the RGB components, optionally weighted by the given percentage. The opacity of the colors is also considered when weighting the components.

The weight specifies the amount of the first color that should be included in the returned color. The default, 50%, means that half the first color and half the second color should be used. 25% means that a quarter of the first color and three quarters of the second color should be used.
    </further>
    <params>color1, color2, [weight = 50%]</params>
    <exampleLess>
<![CDATA[     
.example1 { background: mix(red, yellow); } 
.example2 { background: mix(red, yellow, 20%); } 
]]>
    </exampleLess>
    <exampleBody>
<![CDATA[
<div class="example1">Orange</div>
<div class="example2">More Yellow</div>
]]>
    </exampleBody>
  </topic>


</chapter>

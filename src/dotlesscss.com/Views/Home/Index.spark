<div id="header1">
	<div class="content">
		<markdown xml:space="preserve">
* [Documentation][1]
* [See Source Code][2]
* [Tweet about .Less][3]
* [Discuss .Less][4]

[1]: /Docs "Documentation"
[2]: http://github.com/dotless/dotless "See Source Code"
[3]: http://twitter.com/home?status={.LESS}%20extends%20CSS%20with%20variables,%20mixins,%20operations%20and%20nested%20rules%20http://www.dotlesscss.com "Tweet about us"
[4]: http://groups.google.com/group/dotless "Discuss DotLess With Us"
      </markdown>
		<img src="~/Content/Images/logo.jpg" alt="dotless - a LESS css port for .NET" id="logo"  />
		<a href="${ Url.Action('Index', 'Home') }" title="Dotless - is in beta so please bear us through the issues">
			<img src="~/Content/Images/beta.png" alt="dotless - is in beta so bear us" id="beta"  />
		</a>
	</div>
</div>
<div id="header2">
	<div class="content">
		<div class="left">
			<markdown xml:space="preserve">
# Write regular CSS with your .NET apps,
# then add a few variables, mixins and nested rules.

.less (pronounced dot-less)  is a .NET port of the funky [ruby LESS libary](http://lesscss.org/ "LESS css")  
Lovingly ported by [Christopher Owen], [Erik van Brakel], [Daniel Hoelbling] and [James Foster]

[Christopher Owen]: http://enginechris.wordpress.com/ "Chris Owen"
[Erik van Brakel]: http://blog.smoothfriction.nl/ "Erik van Brakel"
[Daniel Hoelbling]: http://www.tigraine.at/ "Daniel Hoelbling"
[James Foster]: http://github.com/jamesfoster "James Foster"
        </markdown>
		</div>
		<div class="right">
			<a href="http://www.dotlesscss.com:8081/viewLog.html?buildId=lastPinned&buildTypeId=bt3&tab=artifacts&guest=1" title="Get dotless" target="_blank">
				<img src="~/Content/Images/download_button.png" style="border:0;" alt="download"  />
			</a>
		</div>
	</div>
</div>

<div class="content sections">

    <div class="section">
      <markdown xml:space="preserve">

### Variables

Variables allow you to specify widely used values in a single place, and then re-use
them throughout the style sheet, making global changes as easy as changing one line
of code.

<pre><code><span>@brand_color</span>: #4D926F;

#header {
  color: <span>@brand_color</span>;
}

h2 {
  color: <span>@brand_color</span>;
}</code></pre>


### Operations

Are some elements in your style sheet proportional to other elements? Operations
let you add, subtract, divide and multiply property values and colors, giving you
the power to do create complex relationships between properties.

<pre><code>@the-border: 1px;
@base-color: #111;

#header {
  color: <span>@base-color * 3</span>;
  border-left: @the-border;
  border-right: <span>@the-border * 2</span>;
}

#footer {
  color: <span>(@base-color + #111) * 1.5</span>;
}</code></pre>

      </markdown>
    </div>

    <div class="section">
      <markdown xml:space="preserve">
### Mixins

Mixins allow you to embed all the properties of a class into another class by simply
including the class name as one of its properties. It's just like variables, but
for whole classes.

<pre><code>.rounded_corners(@radius: 5px) {
  -moz-border-radius: @radius;
  -webkit-border-radius: @radius;
  border-radius: @radius;
}

#header {
  <span>.rounded_corners</span>;
}

#footer {
  <span>.rounded_corners(10px)</span>;
}</code></pre>


### Nested Rules

Rather than constructing long selector names to specify inheritance, in Less you
can simply nest selectors inside other selectors. This makes inheritance clear and
style sheets shorter.

<pre><code>#header {
    color: red;
    <span>a {
       font-weight: bold;
       text-decoration: none;
    }</span>
}</code></pre>


### Functions

.LESS implements a number of functions to make working with colors easier.

<pre><code>@base-color: <span>hsl(30, 40%, 60%)</span>

#header {
  color: <span>lightness(@base-color, 10%)</span>;
}

#footer {
  color: <span>saturation(@base-color, -10%)</span>;
}
</code></pre>

      </markdown>
    </div>

    <div class="section">
      <div  id="getting-started">
        <markdown xml:space="preserve">

### 1. Download the latest source

You can find the latest source code for dotless at GitHub and build the project

---

### 2. Include our reference to your web project

![Add a few reference](${ Url.Content("~/Content/Images/references.jpg") })

---

### 3. Add a new HttpHandler to your Web.Config

Lets make the dotless processor handle our .LESS files.

Add this entry to the HttpHandlers section of your Web.Config:

<pre><code>&lt;add type="
dotless.Core.LessCssHttpHandler
,dotless.Core" validate="false"
path="*.LESS" verb="*" /&gt;</code></pre>

---

### 4. Add a few configuration sections (optional)

First add our config handler in the "configSections" node of your web.config

<pre><code>&lt;section name="dotless"
type="dotless.Core.configuration.
DotlessConfigurationSectionHandler
,dotless.Core" /&gt;</code></pre>

Now you can configure caching and minifying of the Css output

<pre><code>&lt;dotless
minifyCss="false"
cache="true" /&gt;</code></pre>

---

### 5. Get started

Reference your LESS files the same way as you would any other CSS file, just ensure that you use the .LESS extention.

        </markdown>
      </div>

      <div style="float:right;">
        <a href="http://www.engineroomapps.com" title="Thanks to - Engine Room Apps">
          <img src="~/Content/Images/engineroom_logo.jpg"  alt="Engine Room Apps" />
        </a>
      </div>
    </div>
    <span class="clearer"></span>

  </div>
